/* eslint-disable no-console */

import appRootDir from 'app-root-dir';
import bodyParser from 'body-parser';
import compression from 'compression';
import express from 'express';
import mongoose from 'mongoose';
import mongoSession from 'connect-mongo';
import passport from 'passport';
import session from 'express-session';
import { resolve as pathResolve } from 'path';
import api from './api/api';
import reactApplication from './middleware/reactApplication';
import security from './middleware/security';
import clientBundle from './middleware/clientBundle';
import serviceWorker from './middleware/serviceWorker';
import offlinePage from './middleware/offlinePage';
import errorHandlers from './middleware/errorHandlers';
import config from '../config';
import secrets from '../config/secrets';
import initPassport from './passport/init';

const MongoStore = mongoSession(session);

// Create our express based server.
const app = express();

// Don't expose any software information to potential hackers.
app.disable('x-powered-by');

// Security middlewares.
app.use(...security);

// Gzip compress the responses.
app.use(compression());

const options = {
  server: { socketOptions: { keepAlive: 300000, connectTimeoutMS: 30000 } },
  replset: { socketOptions: { keepAlive: 300000, connectTimeoutMS: 30000 } },
};
mongoose.connect(secrets.db, options);

app.use(session({
  secret: secrets.session,
  store: process.env.BUILD_FLAG_IS_DEV ? null : new MongoStore({
    mongooseConnection: mongoose.connection,
    touchAfter: 3600,
  }),
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 24 * 60 * 60 * 1000 * 7, // 7 Days
    secure: false,
  },
}));

app.use(bodyParser.json());

app.use(passport.initialize());
app.use(passport.session());
initPassport(passport);

// Register our service worker generated by our webpack config.
// We do not want the service worker registered for development builds, and
// additionally only want it registered if the config allows.
if (!process.env.BUILD_FLAG_IS_DEV && config('serviceWorker.enabled')) {
  app.get(`/${config('serviceWorker.fileName')}`, serviceWorker);
  app.get(
    `${config('bundles.client.webPath')}${config('serviceWorker.offlinePageFileName')}`,
    offlinePage,
  );
}

// Configure serving of our client bundle.
app.use(config('bundles.client.webPath'), clientBundle);

// Configure static serving of our "public" root http path static files.
// Note: these will be served off the root (i.e. '/') of our application.
app.use(express.static(pathResolve(appRootDir.get(), config('publicAssetsPath'))));

app.use('/api', api);

// The React application middleware.
app.get('*', reactApplication);

// Error Handler middlewares.
app.use(...errorHandlers);

// Create an http listener for our express app.
const listener = app.listen(config('port'), config('host'), () =>
  console.log(`Server listening on port ${config('port')}`),
);

// We export the listener as it will be handy for our development hot reloader,
// or for exposing a general extension layer for application customisations.
export default listener;
